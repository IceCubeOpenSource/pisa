"""
Common tools for performing an analysis collected into a single class
`Analysis` that can be subclassed by specific analyses.
"""


from __future__ import absolute_import, division

from collections import OrderedDict, Sequence
from copy import deepcopy
from itertools import product
import sys
import time

import numpy as np
import scipy.optimize as optimize

from pisa import EPSILON, FTYPE, ureg, Q_
from pisa.core.map import Map, MapSet
from pisa.core.param import ParamSet
from pisa.utils.config_parser import parse_minimizer_config, PISAConfigParser
from pisa.utils.fileio import to_file
from pisa.utils.log import logging
from pisa.utils.minimization import set_minimizer_defaults, _minimizer_x0_bounds,\
                                    validate_minimizer_settings,\
                                    display_minimizer_header, run_minimizer,\
                                    Counter, MINIMIZERS_USING_SYMM_GRAD
from pisa.utils.stats import METRICS_TO_MAXIMIZE, it_got_better


__all__ = ['Analysis', 'apply_fit_settings', 'ANALYSIS_METHODS']

__author__ = 'J.L. Lanfranchi, P. Eller, S. Wren'

__license__ = '''Copyright (c) 2014-2017, The IceCube Collaboration

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.'''

ANALYSIS_METHODS = ('minimize', 'scan', 'pull')
"""Allowed parameter fitting methods."""

def check_t23_octant(fit_info):
    """Check that theta23 is in the first or second octant.

    Parameters
    ----------
    fit_info

    Returns
    -------
    octant_index : int

    Raises
    ------
    ValueError
        Raised if the theta23 value is not in first (`octant_index`=0) or
        second octant (`octant_index`=1)

    """
    valid_octant_indices = (0, 1)

    theta23 = fit_info['params'].theta23.value
    octant_index = int(
        ((theta23 % (360 * ureg.deg)) // (45 * ureg.deg)).magnitude
    )
    if octant_index not in valid_octant_indices:
        raise ValueError('Fitted theta23 value is not in the'
                         ' first or second octant.')
    return octant_index


def apply_fit_settings(fit_settings, free_params):
    """Validate fit settings (cf. `config_parser.parse_fit_config`) against
    a `DistributionMaker`'s set of free parameters. Ensure that params,
    ranges, test points, seeds etc. are compatible with free parameter specs.

    Modifies fit_settings in-place.

    Parameters
    ----------
    fit_settings : dict
        Dictionary of fit settings as generated by
        `config_parser.parse_fit_config`

    free_params : ParamSet
        free parameters to which the fit settings are to be applied

    """
    fit_methods = fit_settings.keys()
    # TODO: don't require all possible methods to be present
    #assert set(fit_methods) == set(ANALYSIS_METHODS)

    # wildcard can only occur once in fit_settings; all parameters not
    # specified will be treated by the method which has the wildcard
    wildcard = '*'

    method_with_wildcard = [
        fit_method for fit_method in fit_methods
        if wildcard in fit_settings[fit_method]['params']
    ]
    assert len(method_with_wildcard) <= 1

    params_with_fit_method = [
        pname for fit_method in fit_methods
        for pname in fit_settings[fit_method]['params'].keys()
        if pname != wildcard
    ]

    for pname in params_with_fit_method:
        # require to be a free parameter
        assert pname in free_params.names

    # remaining
    params_remaining = [pname for pname in free_params.names
                        if pname not in params_with_fit_method]

    if method_with_wildcard:
        method_with_wildcard = method_with_wildcard[0]
        fit_settings[method_with_wildcard]['params'].pop(wildcard)
        # these need the fit method settings defaults
        defaults = fit_settings[method_with_wildcard].pop('defaults')
        fit_settings[method_with_wildcard]['params'].update(
            {premain: defaults for premain in params_remaining}
        )
    elif params_remaining:
        raise ValueError(
            'Cannot tell how to fit the free parameters %s. Please provide'
            ' these in the fit settings or use the wildcard "%s".'
            % (params_remaining, wildcard)
        )

    # remove any 'default' entry (shouldn't be here in the first place)
    # for the other fit methods which don't make use
    # of wildcard
    for fit_method in fit_methods:
        fit_settings[fit_method].pop('defaults', None)

    # make the scan/pull values for each parameter
    # (can apply identical treatment)
    # These are constructed from a range and an nvalues integer, where
    # the range can be given as "nominal+/-<scale>*nominal.
    # TODO: allow for non-linearly spaced scan values
    # TODO: allow for flexibility beyond symmetry around nominal
    # TODO: compare fit ranges to free_params ranges, precedence?
    for fit_method in ['pull', 'scan']:
        if not fit_method in fit_settings:
            continue
        new_values_d = {'params': [], 'values': []}
        for pname, sett_d in fit_settings[fit_method]['params'].items():
            nvals = int(sett_d['nvalues'])
            prange = sett_d['range']
            target_units = free_params[pname].units
            if isinstance(prange, basestring):
                try:
                    scale_nom = float(prange[prange.find('+/-')+3:prange.find('*')])
                except:
                    logging.error(
                        'Could not interpret range string "%s" for parameter "%s".'
                        ' Please specify as "nominal+/-<float>*nominal".'
                        % (prange, pname)
                    )
                    raise
                nom = free_params[pname].nominal_value
                prange = [nom - scale_nom * nom, nom + scale_nom * nom]
            elif isinstace(prange, Q_):
                if not isinstance(prange, Sequence):
                    raise TypeError(
                        'Range specified for parameter "%s" is not'
                        ' a sequence but of "%s".' % (pname, type(prange))
                    )
                if not len(prange) == 2:
                    raise ValueError(
                        'Range "%s" specified for parameter "%s" is not'
                        ' of length 2.' % (prange, pname)
                    )
                try:
                    prange.ito(target_units)
                except:
                    logging.error(
                        'The units ("%s") specified for parameter "%s" are not'
                        ' compatible with those ("%s") of the corresponding'
                        ' parameter in the `ParamSet` of free parameters.'
                        % (prange.units, target_units)
                    )
                    raise
            else:
                raise TypeError(
                    'Range "%s" specified for parameter "%s" is of "%s" which'
                    ' is unhandled.' % (prange, pname)
                )
            values = np.linspace(prange[0], prange[1], nvals) * target_units
            new_values_d['params'].append(pname)
            new_values_d['values'].append(values)

        # overwrite entry with the new dict
        fit_settings[fit_method] = new_values_d

    minimize_settings = fit_settings['minimize']
    # all we do here for now is move 'global' and 'local' minimizer cfg
    # out from under one param to its own entry (assuming all minimizer cfg's
    # are identical) and make a simple list of params
    # TODO: could also allow for min. ranges to be specified in fit settings,
    # or for more complex things such as seeds
    new_minimize_settings_d = {'global': None, 'local': None, 'params': []}
    for pname, sett_d in minimize_settings['params'].items():
        if new_minimize_settings_d['global'] is None:
            new_minimize_settings_d['global'] = sett_d['global']
        else:
            assert sett_d['global'] == new_minimize_settings_d['global']
        if new_minimize_settings_d['local'] is None:
            new_minimize_settings_d['local'] = sett_d['local']
        else:
            assert sett_d['local'] == new_minimize_settings_d['local']
        min_sett_global = new_minimize_settings_d['global']
        if isinstance(min_sett_global, basestring):
            min_sett_global = parse_minimizer_config(min_sett_global)
        min_sett_local = new_minimize_settings_d['local']
        if isinstance(min_sett_local, basestring):
            min_sett_local = parse_minimizer_config(min_sett_local)

        new_minimize_settings_d['global'] = min_sett_global
        new_minimize_settings_d['local'] = min_sett_local
        new_minimize_settings_d['params'].append(pname)

    fit_settings['minimize'] = new_minimize_settings_d

    return fit_settings


class Analysis(object):
    """Major tools for performing "canonical" IceCube/DeepCore/PINGU analyses.

    * "Data" distribution creation (via passed `data_maker` object)
    * Asimov distribution creation (via passed `distribution_maker` object)
    * Minimizer Interface (via method `_minimizer_callable`)
        Interfaces to a minimizer for modifying the free parameters of the
        `distribution_maker` to fit its output (as closely as possible) to the
        data distribution is provided. See [minimizer_settings] for

    """
    def __init__(self):
        self._nit = 0

    def fit_hypo_new(self, data_dist, hypo_maker, hypo_param_selections, metric,
                     fit_settings=None, reset_free=False, minimizer_settings=None,
                     extra_hypo_param_selections=None, other_metrics=None,
                     return_full_scan=False, blind=False, pprint=True):
        """Require fit_settings to be dict like:
        fit_settings = {'minimize': {'params': ['param3', ...],
                                     'global': <global_min>.cfg,
                                     'local': <local_min>.cfg}
                        'scan':     {'params': ['param1', ...],
                                     'values': [steplist1, ...]},
                        'pull':     {'params': ['param2', ...],
                                     'values': [steplist2, ...]}
                       }
        Minimizer settings specified as `minimizer_settings` argument take
        precedence over those in `fit_settings`.
        """

        if not isinstance(extra_hypo_param_selections, Sequence):
            extra_hypo_param_selections = [extra_hypo_param_selections]

        for extra_param_selection in extra_hypo_param_selections:
            if extra_param_selection is not None:
                full_param_selections = hypo_param_selections
                full_param_selections.append(extra_param_selection)
            else:
                full_param_selections = hypo_param_selections
            # Select the version of the parameters used for this hypothesis
            hypo_maker.select_params(full_param_selections)

            # only apply fit settings after the param selection has been
            # applied
            apply_fit_settings(fit_settings, hypo_maker.params.free)

            minimize_params = fit_settings['minimize']['params']
            if minimize_params:
                # check if minimizer settings are passed into this method,
                # fall back to those given in fit settings
                if minimizer_settings is None:
                    # note: we assume these are parsed already!
                    minimizer_settings = {
                        'global': fit_settings['minimize']['global'],
                        'local': fit_settings['minimize']['local']
                    }
                assert minimizer_settings is not None

            scan_params = fit_settings['scan']['params']
            scan_vals = []
            for i,pname in enumerate(scan_params):
                scan_vals.append([(pname, val) for val in
                                  fit_settings['scan']['values'][i]])

            pull_params = fit_settings['pull']['params']
            fit_settings.pop('scan')

            for pname in tuple(minimize_params) + tuple(scan_params) + tuple(pull_params):
                # require all params to be set to free initially
                assert pname in hypo_maker.params.free.names
            # TODO: excess, missing

            # the parameters to scan over need to be fixed
            hypo_maker.params.fix(scan_params)
            params = hypo_maker.params

            # TODO: if there are no scan_vals, we can just inject e.g. the nominal
            # value for each free parameter
            if not scan_vals:
                scan_vals = [[(pname, hypo_maker.params[pname].value)]
                              for pname in hypo_maker.params.free.names]

            # each scan point comes with its own best fit
            scan_fit_infos = []
            for i, pos in enumerate(product(*scan_vals)):
                msg = ''
                sep = ', '
                for (pname, val) in pos:
                    params[pname].value = val
                    if isinstance(val, float) or isinstance(val, ureg.Quantity):
                        if msg:
                            msg += sep
                        msg += '%s = %s'%(pname, val)
                    else:
                        raise TypeError("val is of type %s which I don't know "
                                        "how to deal with in the output "
                                        "messages."% type(val))
                # Reset free parameters to nominal values
                if reset_free:
                    hypo_maker.reset_free()
                else:
                    # Saves the current minimizer start values (for the octant check)
                    optimizer_start_params = hypo_maker.params

                best_fit_info = self.fit_hypo_inner_new(
                    hypo_maker=hypo_maker,
                    data_dist=data_dist,
                    metric=metric,
                    fit_settings_inner=fit_settings,
                    minimizer_settings=minimizer_settings,
                    other_metrics=other_metrics,
                    pprint=pprint,
                    blind=blind
                )
                scan_fit_infos.append(best_fit_info)
                if i >= 1 and not return_full_scan:
                    if it_got_better(
                           new_metric_val=best_fit_info['metric_val'],
                           old_metric_val=scan_fit_infos[i-1]['metric_val'],
                           metric=metric
                        ):
                        best_ind = i

        # always return a list (of one ore more fit results)
        if return_full_scan:
            logging.debug("Returning full hypo scan.")
            return scan_fit_infos
        else:
            logging.debug("Only returning overall best fit.")
            if len(scan_fit_infos) == 1:
                return scan_fit_infos
            else:
                return [scan_fit_infos[best_ind]]


    def fit_hypo_inner_new(self, data_dist, hypo_maker, metric, fit_settings_inner,
                           minimizer_settings=None, other_metrics=None,
                           pprint=True, blind=False):

        pull_params = fit_settings_inner['pull']['params']
        minimize_params = fit_settings_inner['minimize']['params']

        # dispatch correct fitting method depending on combination of
        # pull and minimize params

        # no parameters to fit
        if not len(pull_params) and not len(minimize_params):
            logging.info("Nothing else to do. Calculating metric(s).")
            nofit_hypo_asimov_dist = hypo_maker.get_outputs(return_sum=True)
            fit_info = self.nofit_hypo(
                data_dist=data_dist,
                hypo_maker=hypo_maker,
                hypo_param_selections=None,
                hypo_asimov_dist=nofit_hypo_asimov_dist,
                metric=metric,
                other_metrics=other_metrics,
                blind=blind
           )

        # only parameters to optimize numerically
        elif len(minimize_params) and not len(pull_params):
            fit_info = self.fit_hypo_minimizer(
                data_dist=data_dist,
                hypo_maker=hypo_maker,
                minimizer_settings=minimizer_settings,
                metric=metric,
                other_metrics=other_metrics,
                blind=blind
            )

        # only parameters to fit with pull method
        elif len(pull_params) and not len(minimize_params):
            raise NotImplementedError("Pull method not implemented yet!")
            fit_info = self.fit_hypo_pull(
                data_dist=data_dist,
                hypo_maker=hypo_maker,
                metric=metric,
                other_metrics=other_metrics,
                blind=blind
            )
        # parameters to optimize numerically and to fit with pull method
        else:
            raise NotImplementedError(
                "Combination of minimization and pull method not implemented yet!"
            )
        return fit_info


    def fit_hypo(self, data_dist, hypo_maker, hypo_param_selections, metric,
                 minimizer_settings, reset_free=True, check_octant=True,
                 check_ordering=False, other_metrics=None,
                 blind=False, pprint=True):
        """Fitter "outer" loop: If `check_octant` is True, run
        `fit_hypo_inner` starting in each octant of theta23 (assuming that
        is a param in the `hypo_maker`). Otherwise, just run the inner
        method once.

        Note that prior to running the fit, the `hypo_maker` has
        `hypo_param_selections` applied and its free parameters are reset to
        their nominal values.

        Parameters
        ----------
        data_dist : MapSet
            Data distribution(s). These are what the hypothesis is tasked to
            best describe during the optimization process.

        hypo_maker : DistributionMaker or instantiable thereto
            Generates the expectation distribution under a particular
            hypothesis. This typically has (but is not required to have) some
            free parameters which can be modified by the minimizer to optimize
            the `metric`.

        hypo_param_selections : None, string, or sequence of strings
            A pipeline configuration can have param selectors that allow
            switching a parameter among two or more values by specifying the
            corresponding param selector(s) here. This also allows for a single
            instance of a DistributionMaker to generate distributions from
            different hypotheses.

        metric : string
            The metric to use for optimization. Valid metrics are found in
            `VALID_METRICS`. Note that the optimized hypothesis also has this
            metric evaluated and reported for each of its output maps.

        minimizer_settings : string or dict

        check_octant : bool
            If theta23 is a parameter to be used in the optimization (i.e.,
            free), the fit will be re-run in the second (first) octant if
            theta23 is initialized in the first (second) octant.

        check_ordering : bool
            If the ordering is not in the hypotheses already being tested, the
            fit will be run in both orderings.

        other_metrics : None, string, or list of strings
            After finding the best fit, these other metrics will be evaluated
            for each output that contributes to the overall fit. All strings
            must be valid metrics, as per `VALID_METRICS`, or the
            special string 'all' can be specified to evaluate all
            VALID_METRICS..

        pprint : bool
            Whether to show live-update of minimizer progress.

        blind : bool
            Whether to carry out a blind analysis. This hides actual parameter
            values from display and disallows these (as well as Jacobian,
            Hessian, etc.) from ending up in logfiles.


        Returns
        -------
        best_fit_info : OrderedDict (see fit_hypo_inner method for details of
            `fit_info` dict)
        alternate_fits : list of `fit_info` from other fits run

        """

        if check_ordering:
            if 'nh' in hypo_param_selections or 'ih' in hypo_param_selections:
                raise ValueError('One of the orderings has already been '
                                 'specified as one of the hypotheses but the '
                                 'fit has been requested to check both. These '
                                 'are incompatible.')

            logging.info('Performing fits in both orderings.')
            extra_param_selections = ['nh', 'ih']
        else:
            extra_param_selections = [None]

        alternate_fits = []

        for extra_param_selection in extra_param_selections:
            if extra_param_selection is not None:
                full_param_selections = hypo_param_selections
                full_param_selections.append(extra_param_selection)
            else:
                full_param_selections = hypo_param_selections
            # Select the version of the parameters used for this hypothesis
            hypo_maker.select_params(full_param_selections)

            # Reset free parameters to nominal values
            if reset_free:
                hypo_maker.reset_free()
            else:
                # Saves the current minimizer start values for the octant check
                minimizer_start_params = hypo_maker.params

            best_fit_info = self.fit_hypo_inner(
                hypo_maker=hypo_maker,
                data_dist=data_dist,
                metric=metric,
                minimizer_settings=minimizer_settings,
                other_metrics=other_metrics,
                pprint=pprint,
                blind=blind
            )

            # Decide whether fit for other octant is necessary
            if check_octant and 'theta23' in hypo_maker.params.free.names:
                logging.debug('checking other octant of theta23')
                if reset_free:
                    hypo_maker.reset_free()
                else:
                    for param in minimizer_start_params:
                        hypo_maker.params[param.name].value = param.value

                # Hop to other octant by reflecting about 45 deg
                theta23 = hypo_maker.params.theta23
                inflection_point = (45*ureg.deg).to(theta23.units)
                theta23.value = 2*inflection_point - theta23.value
                hypo_maker.update_params(theta23)

                # Re-run minimizer starting at new point
                new_fit_info = self.fit_hypo_inner(
                    hypo_maker=hypo_maker,
                    data_dist=data_dist,
                    metric=metric,
                    minimizer_settings=minimizer_settings,
                    other_metrics=other_metrics,
                    pprint=pprint,
                    blind=blind
                )

                # Check to make sure these two fits were either side of 45
                # degrees.
                old_octant = check_t23_octant(best_fit_info)
                new_octant = check_t23_octant(new_fit_info)

                if old_octant == new_octant:
                    logging.warning(
                        'Checking other octant was NOT successful since both '
                        'fits have resulted in the same octant. Fit will be'
                        ' tried again starting at a point further into '
                        'the opposite octant.'
                    )
                    alternate_fits.append(new_fit_info)
                    if old_octant > 0.0:
                        theta23.value = (55.0*ureg.deg).to(theta23.units)
                    else:
                        theta23.value = (35.0*ureg.deg).to(theta23.units)
                    hypo_maker.update_params(theta23)

                    # Re-run minimizer starting at new point
                    new_fit_info = self.fit_hypo_inner(
                        hypo_maker=hypo_maker,
                        data_dist=data_dist,
                        metric=metric,
                        minimizer_settings=minimizer_settings,
                        other_metrics=other_metrics,
                        pprint=pprint,
                        blind=blind
                    )
                    # Make sure the new octant is sensible
                    check_t23_octant(new_fit_info)

                # Take the one with the best fit
                if metric in METRICS_TO_MAXIMIZE:
                    it_got_better = (
                        new_fit_info['metric_val'] > best_fit_info['metric_val']
                    )
                else:
                    it_got_better = (
                        new_fit_info['metric_val'] < best_fit_info['metric_val']
                    )

                if it_got_better:
                    alternate_fits.append(best_fit_info)
                    best_fit_info = new_fit_info
                    if not blind:
                        logging.debug('Accepting other-octant fit')
                else:
                    alternate_fits.append(new_fit_info)
                    if not blind:
                        logging.debug('Accepting initial-octant fit')

        return best_fit_info, alternate_fits


    def fit_hypo_minimizer(self, data_dist, hypo_maker, metric, minimizer_settings,
                           other_metrics=None, pprint=True, blind=False):
        """Fitter "inner" loop: Run an arbitrary scipy minimizer to modify
        hypo dist maker's free params until the data_dist is most likely to have
        come from this hypothesis.

        Note that an "outer" loop can handle discrete scanning over e.g. the
        octant for theta23; for each discrete point the "outer" loop can make a
        call to this "inner" loop. One such "outer" loop is implemented in the
        `fit_hypo` method.


        Parameters
        ----------
        data_dist : MapSet
            Data distribution(s)

        hypo_maker : DistributionMaker or convertible thereto

        metric : string

        minimizer_settings : dict

        other_metrics : None, string, or sequence of strings

        pprint : bool
            Whether to show live-update of minimizer progress.

        blind : bool


        Returns
        -------
        fit_info : OrderedDict with details of the fit with keys 'metric',
            'metric_val', 'params', 'hypo_asimov_dist', and
            'minimizer_metadata'

        """
        use_global_minimizer = False
        # allow for an entry of `None` but also no entry at all
        try:
            minimizer_settings_global = minimizer_settings['global']
        except:
            minimizer_settings_global = None

        if minimizer_settings_global is not None:
            minimizer_settings_global =\
                set_minimizer_defaults(minimizer_settings_global)
            use_global_minimizer = True
            validate_minimizer_settings(minimizer_settings_global)
        minimizer_settings['global'] = minimizer_settings_global

        use_local_minimizer = False
        try:
            minimizer_settings_local = minimizer_settings['local']
        except:
            minimizer_settings_local = None

        # TODO: only require this for now
        #assert minimizer_settings_local is not None

        if minimizer_settings_local is not None:
            minimizer_settings_local =\
                set_minimizer_defaults(minimizer_settings_local)
            use_local_minimizer = True
            validate_minimizer_settings(minimizer_settings_local)
        minimizer_settings['local'] = minimizer_settings_local

        sign = -1 if metric in METRICS_TO_MAXIMIZE else +1

        # set starting values and bounds (bounds possibly modified depending
        # on whether the local minimizer uses gradients)
        x0, bounds = _minimizer_x0_bounds(
            free_params=hypo_maker.params.free,
            minimizer_settings=minimizer_settings_local
        )

        counter = Counter()
        
        fit_history = []
        fit_history.append( [metric] + [v.name for v in hypo_maker.params.free])

        if pprint and not blind:
            # display header if desired/allowed
            display_minimizer_header(free_params=hypo_maker.params.free,
                                     metric=metric)

        # reset number of iterations before each minimization
        self._nit = 0

        # record start time
        start_t = time.time()

        # this is the function that does the heavy lifting
        optimize_result = run_minimizer(
            fun=self._minimizer_callable,
            x0=x0,
            bounds=bounds,
            minimizer_settings=minimizer_settings,
            minimizer_callback=self._minimizer_callback,
            hypo_maker=hypo_maker,
            data_dist=data_dist,
            metric=metric,
            counter=counter,
            fit_history=fit_history,
            pprint=pprint,
            blind=blind
        )

        end_t = time.time()
        if pprint:
            # clear the line
            sys.stdout.write('\n\n')
            sys.stdout.flush()

        minimizer_time = end_t - start_t

        logging.info(
            'Total time to optimize: %8.4f s; # of dists generated: %6d;'
            ' avg dist gen time: %10.4f ms',
            minimizer_time, counter.count, minimizer_time*1000./counter.count
        )

        # Will not assume that the minimizer left the hypo maker in the
        # minimized state, so set the values now (also does conversion of
        # values from [0,1] back to physical range)
        rescaled_pvals = optimize_result.pop('x')
        hypo_maker._set_rescaled_free_params(rescaled_pvals) # pylint: disable=protected-access

        # Record the Asimov distribution with the optimal param values
        hypo_asimov_dist = hypo_maker.get_outputs(return_sum=True)

        # Get the best-fit metric value
        metric_val = sign * optimize_result.pop('fun')

        # Record minimizer metadata (all info besides 'x' and 'fun'; also do
        # not record some attributes if performing blinded analysis)
        metadata = OrderedDict()
        for k in sorted(optimize_result.keys()):
            if blind and k in ['jac', 'hess', 'hess_inv']:
                continue
            metadata[k] = optimize_result[k]

        fit_info = OrderedDict()
        fit_info['metric'] = metric
        fit_info['metric_val'] = metric_val
        if blind:
            hypo_maker.reset_free()
            fit_info['params'] = ParamSet()
        else:
            fit_info['params'] = deepcopy(hypo_maker.params)
        fit_info['detailed_metric_info'] = self.get_detailed_metric_info(
            data_dist=data_dist, hypo_asimov_dist=hypo_asimov_dist,
            params=hypo_maker.params, metric=metric, other_metrics=other_metrics
        )
        fit_info['minimizer_time'] = minimizer_time * ureg.sec
        fit_info['num_distributions_generated'] = counter.count
        fit_info['minimizer_metadata'] = metadata
        fit_info['fit_history'] = fit_history
        # If blind replace hypo_asimov_dist with none object
        if blind:
            hypo_asimov_dist = None
        fit_info['hypo_asimov_dist'] = hypo_asimov_dist

        msg = optimize_result.message
        if blind:
            msg = ''

        if hasattr(optimize_result, 'success'):
            if not optimize_result.success:
                raise ValueError('Optimization failed. Message: "%s"' % msg)
        else:
            logging.warn('Could not tell whether optimization was successful -'
                         ' most likely because global optimization was'
                         ' requested. Message: "%s"' % msg)

        return fit_info

    def nofit_hypo(self, data_dist, hypo_maker, hypo_param_selections,
                   hypo_asimov_dist, metric, other_metrics=None, blind=False):
        """Fitting a hypo to Asimov distribution generated by its own
        distribution maker is unnecessary. In such a case, use this method
        (instead of `fit_hypo`) to still retrieve meaningful information for
        e.g. the match metrics.

        Parameters
        ----------
        data_dist : MapSet
        hypo_maker : DistributionMaker
        hypo_param_selections : None, string, or sequence of strings
        hypo_asimov_dist : MapSet
        metric : string
        other_metrics : None, string, or sequence of strings
        blind : bool

        """
        fit_info = OrderedDict()
        fit_info['metric'] = metric

        # NOTE: Select params but *do not* reset to nominal values to record
        # the current (presumably already optimal) param values
        hypo_maker.select_params(hypo_param_selections)

        # Assess the fit: whether the data came from the hypo_asimov_dist
        try:
            metric_val = (
                data_dist.metric_total(expected_values=hypo_asimov_dist,
                                       metric=metric)
                + hypo_maker.params.priors_penalty(metric=metric)
            )
        except:
            if not blind:
                logging.error(
                    'Failed when computing metric with free params %s',
                    hypo_maker.params.free
                )
            raise

        fit_info['metric_val'] = metric_val

        if blind:
            # Okay, if blind analysis is being performed, reset the values so
            # the user can't find them in the object
            hypo_maker.reset_free()
            fit_info['params'] = ParamSet()
        else:
            fit_info['params'] = deepcopy(hypo_maker.params)
        fit_info['detailed_metric_info'] = self.get_detailed_metric_info(
            data_dist=data_dist, hypo_asimov_dist=hypo_asimov_dist,
            params=hypo_maker.params, metric=metric, other_metrics=other_metrics
        )
        fit_info['minimizer_time'] = 0 * ureg.sec
        fit_info['num_distributions_generated'] = 0
        fit_info['minimizer_metadata'] = OrderedDict()
        fit_info['hypo_asimov_dist'] = hypo_asimov_dist
        return fit_info

    @staticmethod
    def get_detailed_metric_info(data_dist, hypo_asimov_dist, params, metric,
                                 other_metrics=None):
        """Get detailed fit information, including e.g. maps that yielded the
        metric.

        Parameters
        ----------
        data_dist
        hypo_asimov_dist
        params
        metric
        other_metrics

        Returns
        -------
        detailed_metric_info : OrderedDict

        """
        if other_metrics is None:
            other_metrics = []
        elif isinstance(other_metrics, basestring):
            other_metrics = [other_metrics]
        all_metrics = sorted(set([metric] + other_metrics))
        detailed_metric_info = OrderedDict()
        for m in all_metrics:
            name_vals_d = OrderedDict()
            name_vals_d['maps'] = data_dist.metric_per_map(
                expected_values=hypo_asimov_dist, metric=m
            )
            metric_hists = data_dist.metric_per_map(
                expected_values=hypo_asimov_dist, metric='binned_'+m
            )
            maps_binned = []
            for asimov_map, metric_hist in zip(hypo_asimov_dist, metric_hists):
                map_binned = Map(
                    name=asimov_map.name,
                    hist=np.reshape(metric_hists[metric_hist],
                                    asimov_map.shape),
                    binning=asimov_map.binning
                )
                maps_binned.append(map_binned)
            name_vals_d['maps_binned'] = MapSet(maps_binned)
            name_vals_d['priors'] = params.priors_penalties(metric=metric)
            detailed_metric_info[m] = name_vals_d
        return detailed_metric_info

    def _minimizer_callable(self, scaled_param_vals, hypo_maker, data_dist,
                            metric, counter, fit_history, pprint, blind):
        """Simple callback for use by scipy.optimize minimizers.

        This should *not* in general be called by users, as `scaled_param_vals`
        are stripped of their units and scaled to the range [0, 1], and hence
        some validation of inputs is bypassed by this method.

        Parameters
        ----------
        scaled_param_vals : sequence of floats
            If called from a scipy.optimize minimizer, this sequence is
            provieded by the minimizer itself. These values are all expected to
            be in the range [0, 1] and be simple floats (no units or
            uncertainties attached, etc.). Rescaling the parameter values to
            their original (physical) ranges (including units) is handled
            within this method.

        hypo_maker : DistributionMaker
            Creates the per-bin expectation values per map (aka Asimov
            distribution) based on its param values. Free params in the
            `hypo_maker` are modified by the minimizer to achieve a "best" fit.

        data_dist : MapSet
            Data distribution to be fit. Can be an actual-, Asimov-, or
            pseudo-data distribution (where the latter two are derived from
            simulation and so aren't technically "data").

        metric : str
            Metric by which to evaluate the fit. See Map

        counter : Counter
            Mutable object to keep track--outside this method--of the number of
            times this method is called.

        pprint : bool
            Displays a single-line that updates live (assuming the entire line
            fits the width of your TTY).

        blind : bool

        """
        # Want to *maximize* e.g. log-likelihood but we're using a minimizer,
        # so flip sign of metric in those cases.
        sign = -1 if metric in METRICS_TO_MAXIMIZE else +1

        # Set param values from the scaled versions the minimizer works with
        hypo_maker._set_rescaled_free_params(scaled_param_vals) # pylint: disable=protected-access

        # Get the Asimov map set
        try:
            hypo_asimov_dist = hypo_maker.get_outputs(return_sum=True)
        except:
            if not blind:
                logging.error(
                    'Failed to generate Asimov distribution with free'
                    ' params %s', hypo_maker.params.free
                )
            raise

        # Assess the fit: whether the data came from the hypo_asimov_dist
        try:
            metric_val = (
                data_dist.metric_total(expected_values=hypo_asimov_dist,
                                       metric=metric)
                + hypo_maker.params.priors_penalty(metric=metric)
            )
        except:
            if not blind:
                logging.error(
                    'Failed when computing metric with free params %s',
                    hypo_maker.params.free
                )
            raise

        # Report status of metric & params (except if blinded)
        if blind:
            msg = ('minimizer iteration: #%6d | function call: #%6d'
                   %(self._nit, counter.count))
        else:
            #msg = '%s=%.6e | %s' %(metric, metric_val, hypo_maker.params.free)
            msg = '%s %s %s | ' %(('%d'%self._nit).center(6),
                                  ('%d'%counter.count).center(10),
                                  format(metric_val, '0.5e').rjust(12))
            msg += ' '.join([('%0.5e'%p.value.m).rjust(12)
                             for p in hypo_maker.params.free])

        if pprint:
            sys.stdout.write(msg)
            sys.stdout.flush()
            sys.stdout.write('\b' * len(msg))
        else:
            logging.trace(msg)

        counter += 1

        if not blind:
            fit_history.append(
                [metric_val] + [v.value.m for v in hypo_maker.params.free]
            )
            
        return sign*metric_val

    def _minimizer_callback(self, xk): # pylint: disable=unused-argument
        """Passed as `callback` parameter to `optimize.minimize`, and is called
        after each iteration. Keeps track of number of iterations.

        Parameters
        ----------
        xk : list
            Parameter vector

        """
        self._nit += 1


def test_fit_hypo_new():
    """Testing. Could easily break because heavily relies on external stuff."""
    from pisa.core import distribution_maker
    from pisa.utils.log import set_verbosity
    set_verbosity(1)
    example_pipeline = "../../pisa_examples/resources/settings/pipeline/example_gpu.cfg"
    d = distribution_maker.DistributionMaker(pipelines=example_pipeline)
    data_dist = d.get_outputs(return_sum=True)

    fix = ('nu_nubar_ratio', 'energy_scale', 'nu_nubar_ratio', 'nue_numu_ratio',
           'theta13', 'aeff_scale', 'atm_delta_index')
    for pname in fix:
        try:
            d.params[pname].is_fixed = True
        except:
            pass

    if not 'theta23' in d.params.free.names or not 'deltam31' in d.params.free.names:
        return

    d.params.theta23.prior = None
    d.params.deltam31.prior = None
    free_params = d.params.free

    ana = Analysis()

    # define some fit settings for a scan first (without any minimization)
    fit_settings = {'scan': {
                        'params': {
                            'deltam31': {
                                'nvalues': 10, 'range': 'nominal+/-0.05*nominal'
                            },
                            'theta23': {
                                'nvalues': 10, 'range': 'nominal+/-0.2*nominal'
                            },
                        },
                    },
                    'minimize': {'params': {}},
                    'pull': {'params': {}},
    }
    fit_info = ana.fit_hypo_new(data_dist, d, None, 'chi2', fit_settings, True, None, None, None, False, False, True)
    logging.info('Value of metric at best fit: %s' % fit_info[0]['metric_val'])

    # redefine d because it lost its free scan params and repeat the stuff from above
    d = distribution_maker.DistributionMaker(pipelines=example_pipeline)

    fix = ('nu_nubar_ratio', 'energy_scale', 'nu_nubar_ratio', 'nue_numu_ratio',
           'theta13', 'aeff_scale', 'atm_delta_index')
    for pname in fix:
        try:
            d.params[pname].is_fixed = True
        except:
            pass

    if not 'theta23' in d.params.free.names or not 'deltam31' in d.params.free.names:
        return

    d.params.theta23.prior = None
    d.params.deltam31.prior = None
    free_params = d.params.free

    # single minimization

    # setup the minimizer settings
    minimizer_settings_global = parse_minimizer_config(
        '../../pisa_examples/resources/settings/minimizer/'
        'basinhopping_niter100_niter_success20_T1e0_stepsize5e-1_interval50.cfg'
    )
    minimizer_settings_local = parse_minimizer_config(
        '../../pisa_examples/resources/settings/minimizer/'
        'l-bfgs-b_ftol2e-9_gtol1e-5_eps1e-7_maxiter200.cfg'
    )

    minimizer_settings = {'global': {}, 'local': {}}
    minimizer_settings['global'] = minimizer_settings_global
    minimizer_settings['local'] = minimizer_settings_local

    fit_settings = {'scan': {'params': {}},
                    'minimize': {'params': {'*': {}},
                                 'defaults': minimizer_settings},
                    'pull': {'params': {}}
                   }

    fit_info = ana.fit_hypo_new(data_dist, d, None, 'chi2', fit_settings, True, None, None, None, True, False, True)
    logging.info('Value of metric at best fit: %s' % fit_info[0]['metric_val'])

if __name__ == '__main__':
    test_fit_hypo_new()
    
