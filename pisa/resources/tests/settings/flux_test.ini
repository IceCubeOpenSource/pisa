[pipeline]

# define order of stages to be excecuted one after another, and specify the
# service to use for each of them as stage1:serviceA, stage2:serviceB, ...
order = flux:honda

#------------------------------------------------------------------------------
# Binning definitions, linked back to from stage definitions
#------------------------------------------------------------------------------

[binning]

flux_test_binning.order = true_energy, true_coszen
flux_test_binning.true_energy = {'num_bins':400, 'is_log':True, 'domain':[1,80] * units.GeV, 'tex': r'$E_{\rm true}$'}
flux_test_binning.true_coszen = {'num_bins':400, 'is_lin':True, 'domain':[-1,1], 'tex':r'$\cos\,\theta_{Z,{\rm true}}$'}

#------------------------------------------------------------------------------
# Flux
#------------------------------------------------------------------------------

[stage:flux]

# instantiation arguments

output_binning = flux_test_binning
outputs_cache_depth = 0
memcache_deepcopy = False
error_method = None
debug_mode = False

# params

param.oversample_cz = 1
param.oversample_e = 1

# * source data and method
param.flux_file = flux/honda-2015-spl-solmax-aa.d
param.flux_mode = integral-preserving

# * atmospheric index offset
param.atm_delta_index = 0.0 +/- 0.05
param.atm_delta_index.fixed = True
param.atm_delta_index.range = nominal + [-4., +4.] * sigma

param.energy_scale = 1.0 +/- 0.1
param.energy_scale.fixed = False
param.energy_scale.range = nominal + [-3., +3.] * sigma

param.nu_nubar_ratio = 1.0 +/- 0.1
param.nu_nubar_ratio.fixed = True
param.nu_nubar_ratio.range = nominal + [-3., +3.] * sigma

param.nue_numu_ratio = 1.0 +/- 0.03
param.nue_numu_ratio.fixed = True
param.nue_numu_ratio.range = nominal + [-10., +10.] * sigma