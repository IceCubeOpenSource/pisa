#include settings/osc/nufitv20.cfg
#include settings/osc/earth.cfg

#------------------------------------------------------------------------------
# Settings directly affecting or handled by the template maker
#------------------------------------------------------------------------------

[pipeline]

# define order of stages to be excecuted one after another, and specify the
# service to use for each of them as stage1:serviceA, stage2:serviceB, ...
order = data:sample, mc:weight, discr_sys:fit, unfold:roounfold

# Select the params denoted by param.<param_selector>.<param_name>
param_selections = nh, iron


#------------------------------------------------------------------------------
# Binning definitions, linked back to from stage definitions
#------------------------------------------------------------------------------

[binning]

# NOTE: field NAME and UNITS must match those in the pickle file
true_allsky.order = coszen, energy
true_allsky.energy = {'num_bins':10, 'is_log':True, 'domain':[1,300] * units.GeV, 'tex': r'E_{\rm true}'}
true_allsky.coszen = {'num_bins':4, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos\,\theta_{Z,{\rm true}}'}

reco_allsky.order = reco_coszen, reco_energy
reco_allsky.reco_energy = {'num_bins':30, 'is_log':True, 'domain':[0.1,600] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_allsky.reco_coszen = {'num_bins':10, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos\,\theta_{Z,{\rm reco}}'}

unfolded_allsky.order = coszen, energy
unfolded_allsky.energy = {'num_bins':10, 'is_log':True, 'domain':[1,300] * units.GeV, 'tex': r'E_{\rm unfolded}'}
unfolded_allsky.coszen = {'num_bins':4, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos\,\theta_{Z,{\rm unfolded}}'}

#------------------------------------------------------------------------------
# DATA
#------------------------------------------------------------------------------

[stage:data]

# instantiation arguments
output_binning = reco_allsky
# output_names = all_nu
output_names = all_nu, muons, noise

error_method = None
debug_mode = False
outputs_cache_depth = 100
# TODO(shivesh): figure out why this needs to be True
memcache_deepcopy = False

# params:
# * event selection config file
param.data_sample_config = settings/mc/greco.cfg

# * dataset - pick which set to use from the config file
#   examples: nominal, neutrinos:dom_eff:1.05, muons:hole_ice:0.01
#   neutrinos:gen_lvl will load the generator level events
#   the nominal set will be used for the event types not specified
param.dataset = nominal

# * cuts
param.keep_criteria = None

# * return events as output instead of MapSet
param.output_events_data = True

#------------------------------------------------------------------------------
# MC
#------------------------------------------------------------------------------

[stage:mc]

# instantiation arguments
output_binning = <!stage:data|output_binning!>
input_names = <!stage:data|output_names!>
output_names = <!stage:data|output_names!>
# output_names = nue_cc+nuebar_cc, numu_cc+numubar_cc, nutau_cc+nutaubar_cc, nuall_nc+nuallbar_nc, muons, noise
# output_names = numu_cc+numubar_cc

error_method = <!stage:data|error_method!>
debug_mode = <!stage:data|debug_mode!>
disk_cache = True
outputs_cache_depth = <!stage:data|outputs_cache_depth!>
memcache_deepcopy = <!stage:data|memcache_deepcopy!>

# params:
# * return events as output instead of MapSet
param.output_events_mc = True

# * Perform KDE smoothing of output MapSet
param.kde_hist = False

# * livetime
# param.livetime = 8.3670796E7 units.s
param.livetime = 1 units.common_year
# param.livetime = 1 .s
param.livetime.fixed = True

# * diff xsec nu shape parameter
param.nu_diff_DIS = 0.0 +/- 0.0757
param.nu_diff_DIS.fixed = False
param.nu_diff_DIS.range = nominal + [0., +3.] * sigma

# * diff xsec nu normalisation parameter
param.nu_diff_norm = 1.65125
param.nu_diff_norm.fixed = True

# * diff xsec nubar shape parameter
param.nubar_diff_DIS = 0.0 +/- 0.1008
param.nubar_diff_DIS.fixed = False
param.nubar_diff_DIS.range = nominal + [0., +3.] * sigma

# * diff xsec nubar normalisation parameter
param.nubar_diff_norm = 1.8073
param.nubar_diff_norm.fixed = True

# * high W hadronization xsec parameter
param.hadron_DIS = 0.0 +/- 0.05
param.hadron_DIS.fixed = False
param.hadron_DIS.range = nominal + [0., +3.] * sigma

# * flag to specify whether to calculate unoscillated flux values
param.flux_reweight = True

# * flux params
param.cache_flux = True
param.flux_file = flux/honda-2015-spl-solmax-aa.d

# * atmospheric index offset
param.atm_delta_index = 0.0 +/- 0.05
param.atm_delta_index.fixed = False
param.atm_delta_index.range = nominal + [-4., +4.] * sigma

# * nu/nubar ratio
param.nu_nubar_ratio = 1.0 +/- 0.1
param.nu_nubar_ratio.fixed = False
param.nu_nubar_ratio.range = nominal + [-3., +3.] * sigma

# * nue/numu ratio
param.nue_numu_ratio = 1.0 +/- 0.03
param.nue_numu_ratio.fixed = False
param.nue_numu_ratio.range = nominal + [-10., +10.] * sigma

# * absolute numu normalisation
# TODO(shivesh): find sigma/ranges
param.norm_numu = 1.0
param.norm_numu.fixed = False
param.norm_numu.prior = uniform
param.norm_numu.range = [-1.0, 3.0] * units.dimensionless

# * absolute nutau normalisation
param.norm_nutau = 1.0
param.norm_nutau.fixed = True
param.norm_nutau.prior = uniform
param.norm_nutau.range = [-1.0, 3.0] * units.dimensionless

# * absolute neutral current normalisation
param.norm_nc = 1.0
param.norm_nc.fixed = True
param.norm_nc.prior = uniform
param.norm_nc.range = [-1.0, 3.0] * units.dimensionless

# * oscillations
# * `flux_reweight` flag must be set to "True" for oscillations
param.oscillate = True

# * Earth
param.earth_model = osc/PREM_12layer.dat
param.YeI = <!earth|YeI!>
param.YeM = <!earth|YeM!>
param.iron.YeO = 0.4656
param.pyrolite.YeO = 0.4957

# * detector
param.detector_depth = <!earth|detector_depth!>
param.prop_height = <!earth|prop_height!>

# * mixing values
param.no_nc_osc = False

param.true_e_scale = 1.
param.true_e_scale.fixed = True

param.theta12 = <!osc|theta12!>
param.theta12.fixed = True

param.nh.theta13 = <!osc|theta13_nh!>
param.nh.theta13.fixed = False
param.nh.theta13.range = <!osc|theta13_nh.range!>

param.ih.theta13 = <!osc|theta13_ih!>
param.ih.theta13.fixed = False
param.nh.theta13.range = <!osc|theta13_ih.range!>

param.nh.theta23 = <!osc|theta23_nh!>
param.nh.theta23.fixed = False
param.nh.theta23.range = <!osc|theta23_nh.range!>
param.nh.theta23.prior = <!osc|theta23_nh.prior!>
param.nh.theta23.prior.data = <!osc|theta23_nh.prior.data!>

param.ih.theta23 = <!osc|theta23_ih!>
param.ih.theta23.fixed = False
param.ih.theta23.range = <!osc|theta23_ih.range!>
param.ih.theta23.prior = <!osc|theta23_ih.prior!>
param.ih.theta23.prior.data = <!osc|theta23_ih.prior.data!>

param.nh.deltacp = <!osc|deltacp_nh!>
param.nh.deltacp.fixed = False
param.nh.deltacp.prior = uniform
param.nh.deltacp.range = <!osc|deltacp_nh.range!>

param.ih.deltacp = <!osc|deltacp_ih!>
param.ih.deltacp.fixed = False
param.ih.deltacp.prior = uniform
param.ih.deltacp.range = <!osc|deltacp_ih.range!>

param.deltam21 = <!osc|deltam21!>
param.deltam21.fixed = True

param.nh.deltam31 = <!osc|deltam31_nh_gauss!>
param.nh.deltam31.fixed = False
param.nh.deltam31.range = <!osc|deltam31_nh.range!>

param.ih.deltam31 = <!osc|deltam31_ih_gauss!>
param.ih.deltam31.fixed = False
param.ih.deltam31.range = <!osc|deltam31_ih.range!>

# Muons
param.atm_muon_scale = 1.0 units.dimensionless
param.atm_muon_scale.fixed = True
param.atm_muon_scale.prior = uniform
param.atm_muon_scale.range = nominal + [-0.3, +0.3] * units.dimensionless

# * Primary CR uncertainty
# ** Location of file containing uncertainty data to spline
param.delta_gamma_mu_file = backgrounds/muongun_primary_cr_uncertainties_coszenith.txt
# ** The type of spline to construct
param.delta_gamma_mu_spline_kind = linear
# ** X variable for which these 1D splines are a function of
param.delta_gamma_mu_variable = coszen
# ** The actual systematic
# TODO(shivesh): GRECO sample doesn't have deposited keys - is this OK?
param.delta_gamma_mu = 0.0 +/- 1.0 units.dimensionless
param.delta_gamma_mu.fixed = True
param.delta_gamma_mu.range = nominal + [-3.0, +3.0] * units.dimensionless

# * absolute noise normalisation
param.norm_noise = 1.0
param.norm_noise.fixed = True
param.norm_noise.prior = uniform
param.norm_noise.range = [-1.0, 3.0] * units.dimensionless

#------------------------------------------------------------------------------
# DISCRETE SYSTEMATICS
#------------------------------------------------------------------------------

[stage:discr_sys]

output_binning = <!stage:mc|output_binning!>
input_names = <!stage:mc|output_names!>
output_names = <!stage:mc|output_names!>

error_method = <!stage:mc|error_method!>
debug_mode = <!stage:mc|debug_mode!>
disk_cache = True
outputs_cache_depth = <!stage:mc|outputs_cache_depth!>
memcache_deepcopy = <!stage:mc|memcache_deepcopy!>

# params:
# * event selection config file
# TODO(shivesh): better way of doing this?
param.pipeline_config = settings/pipeline/example_cfx.cfg

# * event selection config file
param.discr_sys_sample_config = <!stage:data|param.data_sample_config!>

# * extract templates up to this stage for the fitting
param.stop_after_stage = 0

# * return events as output instead of MapSet
param.output_events_discr_sys = True

# * degree of polynomial of the fit spline
param.poly_degree = 1

# * force the spline go through the nominal value
param.force_through_nominal = True

# * apply smoothing to the spline ['none', 'gauss']
param.smoothing = none

# * cache fit coeffs param
param.cache_fit = False

# * DOM efficiency
# TODO(shivesh): prior?
param.nu_dom_eff = 1.0 +/- 0.03
param.nu_dom_eff.fixed = False
# TODO(shivesh): ranges?
param.nu_dom_eff.range = [0.58, 1.15] * units.dimensionless

# * hole ice scattering
param.nu_hole_ice = 0.020 +/- 0.005
param.nu_hole_ice.fixed = False
# TODO(shivesh): ranges?
param.nu_hole_ice.range = [0.01, 0.0333]* units.dimensionless

# TODO(shivesh): prior?
param.mu_dom_eff = 1.0 +/- 0.03
param.mu_dom_eff.fixed = False
# TODO(shivesh): ranges?
param.mu_dom_eff.range = [0.58, 1.15] * units.dimensionless

# * hole ice scattering
param.mu_hole_ice = 0.020 +/- 0.005
param.mu_hole_ice.fixed = False
# TODO(shivesh): ranges?
param.mu_hole_ice.range = [0.01, 0.0333]* units.dimensionless

#------------------------------------------------------------------------------
# UNFOLD
#------------------------------------------------------------------------------

[stage:unfold]

# instantiation arguments
reco_binning = reco_allsky
true_binning = unfolded_allsky
input_names = <!stage:data|output_names!>
output_names = numu_cc+numubar_cc
# output_names = all_nu

error_method = <!stage:mc|error_method!>
debug_mode = <!stage:mc|debug_mode!>
# TODO(shivesh): bugged!
disk_cache = False
outputs_cache_depth = <!stage:mc|outputs_cache_depth!>
memcache_deepcopy = <!stage:mc|memcache_deepcopy!>

# params:
# * load from disk_cache otherwise create the response object
#   NOTE: when using real data the name of the Map must match `output_names`
#   TODO(shivesh): do it in such a way that this is automatic
param.real_data = False

# * path to generator level config file or Pipeline object
#   NOTE: make sure the params in this config file are sync with this one
param.unfold_pipeline_cfg = settings/pipeline/gen_lvl.cfg

# * return efficiency maps for all flavours instead of unfolding
param.return_eff = False

# * random seed for statistical fluctuations, set to 0 for nominal
param.stat_fluctuations = 1234

# * regularisation parameter
#   for Bayesian unfolding, this specifies the number of iterations.
#   setting to 0 does not do any unfolding and instead returns the true reco
#   map in the true_binning when not using real data.
param.regularisation = 2

# * optimize regularization parameter - `real_data` must be `False`
#   for Bayesian unfolding, this find the minimum of the chi2 between truth to
#   find the optimal number of iterations.
param.optimize_reg = False

# * flag to set whether to include efficiency corrections in the unfolding
param.unfold_eff = False

# * flag to set whether to include background subtraction in the unfolding
param.unfold_bg = False

# * flag to set whether to contruct the response object without using weights
param.unfold_unweighted = False
