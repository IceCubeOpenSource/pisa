{
  "nue": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([0.237*np.exp(-e/5.65) + 0.0745 if e < 50 else 0.03 for e in E])",
        "loc2": "lambda E: np.array([0.582*np.exp(-e/4.9) + 0.103 if e < 40 else -0.01 for e in E])",
        "width2": "lambda E: np.array([ 0.533 * np.exp(-e/50.2) - 0.159 if e < 50 else 0.09 for e in E])",
        "fraction": "lambda E: 0.45*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([0.0761*(e-5.38)**2-0.895 if e<11 else 1.0 if e<21 else 0.073*e-0.668 for e in E])",
        "width1": "lambda E: np.array([0.323*e-0.275 if e<11 else 0.0844*e+1.76 if e<21 else 0.112*e+2.61 for e in E])",
        "loc2": "lambda E: np.array([-0.0928*(e-3.71)**2+1.11 if e < 11 else -0.0693*e-1.44 if e<21 else 0.1 for e in E])",
        "width2": "lambda E: np.array([ 0.182*e + 1.11  if e < 11 else 0.368*e - 1.08 if e < 21 else 0.1*e+2.6 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  },
  "numu": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: 0.277 * np.exp(-E/5.16) + 0.0514",
        "loc2": "lambda E: 0.564*np.exp(-E/5.45) + 0.0792",
        "width2": "lambda E: 0.219*np.exp(-E/11.4) + 0.138",
        "fraction": "lambda E: 0.45*np.ones_like(E)"
      },
      "energy":{
        "loc1": "lambda E: np.array([ -0.0988*e - 0.0277 if e < 21 else -0.0901*e - 0.386 for e in E])",
        "width1": "lambda E: np.array([-3.60*np.exp(-e/16.5)+3.88 if e<21 else 0.219*e-0.276 for e in E])",
        "loc2": "lambda E: np.array([ 5.21*np.exp(-e/16.9)-3.41 if e<21 else -0.214*e+2.29 for e in E])",
        "width2": "lambda E: np.array([ 0.346*e + 0.78 if e < 21 else 0.202*e + 2.35 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  },
  "nutau": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00560*e + 0.224 if e < 40 else 0.03 for e in E])",
        "loc2": "lambda E: np.array([-0.017*e + 0.554 if e < 40 else 0.0 for e in E])",
        "width2": "lambda E: np.array([-0.00274*e + 0.312 if e < 40 else 0.2 for e in E])",
        "fraction": "lambda E: 0.4*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([-0.638*e + 0.195 if e < 21 else -0.305*e - 3.15 for e in E])",
        "width1": "lambda E: np.array([0.158*e + 0.276 if e < 21 else 0.254*e + 0.849 for e in E])",
        "loc2": "lambda E: np.array([ -0.245*e + 0.332 if e < 21 else -0.348*e - 2.44 for e in E])",
        "width2": "lambda E: np.array([ 0.150*e + 0.867 if e < 21 else 0.273*e + 0.19 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  },
  "nue_bar": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([0.237*np.exp(-e/5.65) + 0.0745 if e < 50 else 0.03 for e in E])",
        "loc2": "lambda E: np.array([0.582*np.exp(-e/4.9) + 0.103 if e < 40 else -0.01 for e in E])",
        "width2": "lambda E: np.array([ 0.533 * np.exp(-e/50.2) - 0.159 if e < 50 else 0.09 for e in E])",
        "fraction": "lambda E: 0.45*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([0.0761*(e-5.38)**2-0.895 if e<11 else 1.0 if e<21 else 0.073*e-0.668 for e in E])",
        "width1": "lambda E: np.array([0.323*e-0.275 if e<11 else 0.0844*e+1.76 if e<21 else 0.112*e+2.61 for e in E])",
        "loc2": "lambda E: np.array([-0.0928*(e-3.71)**2+1.11 if e < 11 else -0.0693*e-1.44 if e<21 else 0.1 for e in E])",
        "width2": "lambda E: np.array([ 0.182*e + 1.11  if e < 11 else 0.368*e - 1.08 if e < 21 else 0.1*e+2.6 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  },
  "numu_bar": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: 0.277 * np.exp(-E/5.16) + 0.0514",
        "loc2": "lambda E: 0.564*np.exp(-E/5.45) + 0.0792",
        "width2": "lambda E: 0.219*np.exp(-E/11.4) + 0.138",
        "fraction": "lambda E: 0.45*np.ones_like(E)"
      },
      "energy":{
        "loc1": "lambda E: np.array([ -0.0988*e - 0.0277 if e < 21 else -0.0901*e - 0.386 for e in E])",
        "width1": "lambda E: np.array([-3.60*np.exp(-e/16.5)+3.88 if e<21 else 0.219*e-0.276 for e in E])",
        "loc2": "lambda E: np.array([ 5.21*np.exp(-e/16.9)-3.41 if e<21 else -0.214*e+2.29 for e in E])",
        "width2": "lambda E: np.array([ 0.346*e + 0.78 if e < 21 else 0.202*e + 2.35 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  },
  "nutau_bar": {
    "cc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00560*e + 0.224 if e < 40 else 0.03 for e in E])",
        "loc2": "lambda E: np.array([-0.017*e + 0.554 if e < 40 else 0.0 for e in E])",
        "width2": "lambda E: np.array([-0.00274*e + 0.312 if e < 40 else 0.2 for e in E])",
        "fraction": "lambda E: 0.4*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([-0.638*e + 0.195 if e < 21 else -0.305*e - 3.15 for e in E])",
        "width1": "lambda E: np.array([0.158*e + 0.276 if e < 21 else 0.254*e + 0.849 for e in E])",
        "loc2": "lambda E: np.array([ -0.245*e + 0.332 if e < 21 else -0.348*e - 2.44 for e in E])",
        "width2": "lambda E: np.array([ 0.150*e + 0.867 if e < 21 else 0.273*e + 0.19 for e in E])",
        "fraction": "lambda E: np.array([0.4 if e < 21 else 0.01 for e in E])"
      }
    },
    "nc": {
      "coszen": {
        "loc1": "lambda E: -0.01*np.ones_like(E)",
        "width1": "lambda E: np.array([-0.00684*e + 0.302 if e < 40 else 0.0284 for e in E])",
        "loc2": "lambda E: 0.34*np.exp(-E/7.26) + 0.435",
        "width2": "lambda E: 0.26*np.ones_like(E)",
        "fraction": "lambda E: 0.3*np.ones_like(E)"
      },
      "energy": {
        "loc1": "lambda E: np.array([ -0.833*e + 1.11 if e < 21 else -0.664*e - 0.256 for e in E])",
        "width1": "lambda E: np.array([ 0.0828*e + 0.534 if e < 21 else 0.332*e - 1.96 for e in E])",
        "loc2": "lambda E: np.array([ -0.567*e + 1.63 if e < 21 else -0.702*e + 0.112 for e in E])",
        "width2": "lambda E: np.array([ 0.0951*e + 1.14 if e < 21 else 0.302*e - 0.41 for e in E])",
        "fraction": "lambda E: np.array([ 0.4 if e < 21 else 0.01 for e in E])"
      }
    }
  }
}
